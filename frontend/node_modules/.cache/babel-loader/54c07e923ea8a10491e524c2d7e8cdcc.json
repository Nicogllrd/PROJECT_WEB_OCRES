{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\floro\\\\OneDrive\\\\Documents\\\\ECE ing4\\\\technoweb\\\\PROJECT_WEB_OCRES-6\\\\frontend\\\\src\\\\Components\\\\Wid4.js\";\nimport React, { Component } from 'react';\nimport Plot from 'react-plotly.js';\nimport './Widget.css';\nimport './news.css';\n\nclass Wid4 extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lieu: [],\n      XValues: [],\n      YValues: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetch(); //On appelle la méthode fetch suivante\n  }\n\n  fetch() {\n    const pointerToThis = this;\n    let XValuesFunction = [];\n    let YValuesFunction = [];\n    let place = [];\n    fetch(this.props.url) //On récupère notre url en props\n    .then(response => response.json()) //On récupère nos données\n    .then(data => {\n      place.push(data['Meta Data']['2. Symbol']); //On parcourt le JSON pour récupérer le symbole\n\n      pointerToThis.setState({\n        //On attribue à nos states une nouvelle valeur tirée de notre API\n        lieu: place\n      });\n\n      for (var key in data['Time Series (Daily)']) {\n        if (key > \"2021-11-01\") {\n          //Toutes nos données inférieures à début novembre ne sont pas prises en compte\n          XValuesFunction.push(key);\n          YValuesFunction.push(data['Time Series (Daily)'][key]['1. open']);\n        }\n\n        pointerToThis.setState({\n          //On attribue à nos states une nouvelle valeur tirée de notre API\n          XValues: XValuesFunction,\n          YValues: YValuesFunction\n        });\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    console.log(\"The component just updated\");\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Widget\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"March\\xE9 boursier de : \", this.state.lieu), React.createElement(Plot //Utilisation de la librairie Plotly pour générer un graphique\n    , {\n      data: [//On rempli notre graphique avec les données de nos states\n      {\n        x: this.state.XValues,\n        y: this.state.YValues,\n        type: 'log',\n        mode: 'lines+markers',\n        marker: {\n          color: 'red'\n        }\n      }],\n      layout: {\n        width: 450,\n        height: 400,\n        scrollZoom: true\n      } //On regle les dimensions du graphique\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Wid4;","map":{"version":3,"sources":["C:/Users/floro/OneDrive/Documents/ECE ing4/technoweb/PROJECT_WEB_OCRES-6/frontend/src/Components/Wid4.js"],"names":["React","Component","Plot","Wid4","state","lieu","XValues","YValues","componentDidMount","fetch","pointerToThis","XValuesFunction","YValuesFunction","place","props","url","then","response","json","data","push","setState","key","componentDidUpdate","console","log","render","x","y","type","mode","marker","color","width","height","scrollZoom"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAO,cAAP;AACA,OAAO,YAAP;;AAEA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACvBG,KADuB,GACf;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,OAAO,EAAE,EAFH;AAGNC,MAAAA,OAAO,EAAE;AAHH,KADe;AAAA;;AAOzBC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,GADgB,CACgB;AACnC;;AAEDA,EAAAA,KAAK,GAAG;AACN,UAAMC,aAAa,GAAG,IAAtB;AACA,QAAIC,eAAe,GAAG,EAAtB;AACA,QAAIC,eAAe,GAAG,EAAtB;AACA,QAAIC,KAAK,GAAG,EAAZ;AAEAJ,IAAAA,KAAK,CAAC,KAAKK,KAAL,CAAWC,GAAZ,CAAL,CAAuC;AAAvC,KACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EACyC;AADzC,KAEGF,IAFH,CAEQG,IAAI,IAAI;AACVN,MAAAA,KAAK,CAACO,IAAN,CAAWD,IAAI,CAAC,WAAD,CAAJ,CAAkB,WAAlB,CAAX,EADU,CACwC;;AAClDT,MAAAA,aAAa,CAACW,QAAd,CAAuB;AAAa;AAClChB,QAAAA,IAAI,EAAEQ;AADe,OAAvB;;AAIA,WAAK,IAAIS,GAAT,IAAgBH,IAAI,CAAC,qBAAD,CAApB,EAA4C;AAC1C,YAAGG,GAAG,GAAG,YAAT,EAAsB;AAAc;AAClCX,UAAAA,eAAe,CAACS,IAAhB,CAAqBE,GAArB;AACAV,UAAAA,eAAe,CAACQ,IAAhB,CAAqBD,IAAI,CAAC,qBAAD,CAAJ,CAA4BG,GAA5B,EAAiC,SAAjC,CAArB;AACD;;AAEDZ,QAAAA,aAAa,CAACW,QAAd,CAAuB;AAAW;AAChCf,UAAAA,OAAO,EAAEK,eADY;AAErBJ,UAAAA,OAAO,EAAEK;AAFY,SAAvB;AAID;AACJ,KAnBH;AAqBD;;AAEDW,EAAAA,kBAAkB,GAAG;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACT,WACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAA0B,KAAKtB,KAAL,CAAWC,IAArC,CADJ,EAEI,oBAAC,IAAD,CAAgD;AAAhD;AACA,MAAA,IAAI,EAAE,CAAyC;AAC3C;AACAsB,QAAAA,CAAC,EAAE,KAAKvB,KAAL,CAAWE,OADd;AAEAsB,QAAAA,CAAC,EAAE,KAAKxB,KAAL,CAAWG,OAFd;AAGAsB,QAAAA,IAAI,EAAE,KAHN;AAIAC,QAAAA,IAAI,EAAE,eAJN;AAKAC,QAAAA,MAAM,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR;AALR,OADE,CADN;AAUA,MAAA,MAAM,EAAE;AAACC,QAAAA,KAAK,EAAE,GAAR;AAAaC,QAAAA,MAAM,EAAE,GAArB;AAA0BC,QAAAA,UAAU,EAAE;AAAtC,OAVR,CAU8D;AAV9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,CADJ;AAmBC;;AAhEwB;;AAmE7B,eAAehC,IAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport Plot from 'react-plotly.js';\r\nimport './Widget.css';\r\nimport './news.css';\r\n\r\nclass Wid4 extends Component {\r\n      state = {\r\n        lieu: [],\r\n        XValues: [],\r\n        YValues: []\r\n        }\r\n\r\n    componentDidMount() {\r\n        this.fetch();                   //On appelle la méthode fetch suivante\r\n    }\r\n    \r\n    fetch() {\r\n      const pointerToThis = this;\r\n      let XValuesFunction = [];\r\n      let YValuesFunction = [];\r\n      let place = [];\r\n\r\n      fetch(this.props.url)                  //On récupère notre url en props\r\n        .then(response => response.json())     //On récupère nos données\r\n        .then(data => {\r\n            place.push(data['Meta Data']['2. Symbol']);       //On parcourt le JSON pour récupérer le symbole\r\n            pointerToThis.setState({            //On attribue à nos states une nouvelle valeur tirée de notre API\r\n              lieu: place\r\n            });\r\n\r\n            for (var key in data['Time Series (Daily)']){\r\n              if(key > \"2021-11-01\"){             //Toutes nos données inférieures à début novembre ne sont pas prises en compte\r\n                XValuesFunction.push(key);\r\n                YValuesFunction.push(data['Time Series (Daily)'][key]['1. open']);\r\n              }\r\n          \r\n              pointerToThis.setState({          //On attribue à nos states une nouvelle valeur tirée de notre API\r\n                XValues: XValuesFunction,\r\n                YValues: YValuesFunction,\r\n              });\r\n            }\r\n        }\r\n        )\r\n    }\r\n\r\n    componentDidUpdate() {\r\n      console.log(\"The component just updated\")\r\n    }\r\n    \r\n    render() {\r\n    return (\r\n        <div className=\"Widget\">\r\n            <div>\r\n                <h1>Marché boursier de : {this.state.lieu}</h1>\r\n                <Plot                                           //Utilisation de la librairie Plotly pour générer un graphique\r\n                data={[                                        //On rempli notre graphique avec les données de nos states\r\n                    {\r\n                    x: this.state.XValues,\r\n                    y: this.state.YValues,\r\n                    type: 'log',\r\n                    mode: 'lines+markers',\r\n                    marker: {color: 'red'},\r\n                    }\r\n                ]}\r\n                layout={{width: 450, height: 400, scrollZoom: true}}          //On regle les dimensions du graphique\r\n                />\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Wid4;"]},"metadata":{},"sourceType":"module"}